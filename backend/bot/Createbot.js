import { Markup, Telegraf,Scenes,session} from "telegraf";
import { VerifyToken } from "../tools/JWT.js"
import { sendRequest } from "../tools/database.js"
import { tokens } from "../index.js";
import fs from 'fs'
import { randomUUID } from "crypto";


export function SendNotice(bot,chat_id,message){
    let inline_keyboard
    let text
    switch(message.type){
        case 'rent_notice':
            text=`üõé <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∞—Ä–µ–Ω–¥—ã!</b>\n<b>–¢–µ–ª–µ—Ñ–æ–Ω: </b>${message.data.number}\n<b>–¢–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç: </b>${message.data.account}\n<b>–¶–µ–Ω–∞: </b>${message.data.costs}\n<b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: </b>${message.data.date_start}\n<b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: </b>${message.data.date_end}`
            inline_keyboard=[[Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å',`accept:${message.data.id_arend}`),Markup.button.callback('‚úñ –û—Ç–∫–ª–æ–Ω–∏—Ç—å',`decline:${message.data.id_arend}`)]]
            break
        case 'report_notice':
            text=`üöß <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!</b>\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: </b>${message.data.account}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>${message.data.description}`
            break
        case 'payment_notice':
            text=`üéâ –ê—Ä–µ–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n<b>–¢–µ–ª–µ—Ñ–æ–Ω: </b>${message.data.phone}\n<b>–¢–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç: </b>${message.data.account}\n<b>–¶–µ–Ω–∞: </b>${message.data.costs}\n<b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: </b>${new Date(message.data?.time_start_arend).toLocaleString()}\n<b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: </b>${new Date(message.data?.time_end_arend).toLocaleString()}`
            break
    }
    if(!message.data.photo)bot.telegram.sendMessage(chat_id,text,{reply_markup:{inline_keyboard},parse_mode:'HTML'}).catch(err=>console.log(err))
    else bot.telegram.sendPhoto(chat_id,{source:`./reports/${message.data.photo}.jpg`},{caption:text,parse_mode:'HTML'})
}

export function CreateBot(){
    let bot=new Telegraf("6713031119:AAHbAVutoiQAPAgid9PjCC9IHa9ZSesporE")
    const report = new Scenes.WizardScene(
        'report',
        (ctx) => {
            ctx.editMessageText("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞ –±–æ—Ç—É").catch(err=>null)
            ctx.wizard.next()
        },
        async (ctx) => {
            if(!ctx?.message?.location){
                ctx.reply("üò± –û—Ç –≤–∞—Å –æ–∂–∏–¥–∞–ª–∏—Å—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —à–∏—Ä–æ—Ç—ã –∏ –¥–æ–ª–≥–æ—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑").catch(err=>null)
                ctx.wizard.selectStep(1)
            }
            else{
                let parking=await sendRequest(`select * from Parking where ST_DWithin(location::geography,st_setsrid(ST_MakePoint(${ctx.message?.location?.latitude},${ctx.message?.location?.longitude}),4326)::geography,100)`)
                if(parking?.length){
                    ctx.scene.state.parking=parking[0]
                    ctx.reply("üîç –ù–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É. –°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É").catch(err=>console.log(err))
                    ctx.wizard.next()
                }
                else{
                    ctx.reply("ü•≤ –í —Ä–∞–¥–∏—É—Å–µ 100 –º. –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä–∫–æ–≤–æ–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã").catch(err=>console.log(err))
                    ctx.scene.leave()
                }
            }
        },
        async(ctx)=>{
            if (ctx?.message?.text){
                ctx.scene.state.description=ctx?.message?.text
                ctx.reply("üìπ –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â—É—é –≤–∞—à –¥–æ–Ω–æ—Å").catch(err=>console.log(err))
                ctx.wizard.next()
            }
            else {
                ctx.reply("üò± –û—Ç –≤–∞—Å –æ–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑").catch(err=>console.log(err))
                ctx.wizard.selectStep(2)
            }
        },
        async(ctx)=>{
            let title=''
            if (ctx?.message?.document?.file_id) {
                let fileUrl = await bot.telegram.getFileLink(ctx?.message?.document?.file_id);
                const response = await fetch(fileUrl);
                const buffer = Buffer.from(await response.arrayBuffer());
                title = randomUUID();
                const directory = './reports/';
                if (!fs.existsSync(directory)) {
                    fs.mkdirSync(directory, { recursive: true });
                }
                fs.writeFileSync(`${directory}${title}.jpg`, buffer);
            }
            ctx.reply("üìú –î–æ–Ω–æ—Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω")
            let owner_parking=await sendRequest("select OwnerPark.* from Parking join OwnerPark on Parking.id_owner=OwnerPark.id_owner where Parking.id_parking=$1",[ctx.scene.state.parking.id_parking])
            if(owner_parking?.length&&owner_parking[0].telegram!=0){
                let chat=await sendRequest("select * from AccountTelegram where id_account=$1",[owner_parking[0]?.telegram])
                let account=ctx.chat.first_name+' '+ctx.chat.last_name+' @'+ctx.chat.username
                let description=ctx.scene.state.description
                await sendRequest("insert into Report(description,image,reporter,id_parking)values($1,$2,$3,$4)",[description,title,account,ctx.scene.state.parking.id_parking])
                if(chat?.length)SendNotice(bot,chat[0].chat_id,{type:"report_notice",data:{photo:title,account,description}})
            }
            ctx.scene.leave()
        }
    )
    const scenes = new Scenes.Stage([report])
    bot.use(session())
    bot.use(scenes.middleware())
    bot.start(async (ctx)=>{
        let message = ctx.message.text.split(' ')
        if (message?.length>1) {
            let data=VerifyToken(tokens[message[1]])
            if(data.data==null)ctx.reply(`üõ† –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω`).catch(err=>null)
            else{
                let userBot=await sendRequest("select * from AccountTelegram where chat_id=$1",[ctx.chat.id])
                if(!userBot?.length){
                    let from=ctx.message.from
                    await sendRequest("insert into AccountTelegram(chat_id,first_name,last_name,username)values($1,$2,$3,$4)",[ctx.chat.id,from.first_name,from.last_name,from.username])
                    userBot=await sendRequest("select * from AccountTelegram where chat_id=$1",[ctx.chat.id])
                }
                let user
                if (data.data?.role=='owner'){
                    user=await sendRequest("select telegram,id_owner from OwnerPark where id_owner=$1",[data.data?.id])
                    if(!user?.length){
                        ctx.reply("ü™§ –í–ª–∞–¥–µ–ª–µ—Ü –ø–∞—Ä–∫–æ–≤–∫–∏ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω").catch(err=>null)
                        return
                    }
                    else if(user[0].telegram!=0)await sendRequest("delete from AccountTelegram where id_account=$1",[userBot[0].id_account])
                    await sendRequest("update OwnerPark set telegram=$1 where id_owner=$2",[userBot[0].id_account,user[0].id_owner])
                }
                else {
                    user=await sendRequest("select telegram,id_user from AppUser where id_user=$1",[data.data?.id])
                    if(!user?.length){
                        ctx.reply("ü™§ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω").catch(err=>null)
                        return
                    }
                    else if(user[0].telegram!=0)await sendRequest("delete from AccountTelegram where id_account=$1",[userBot[0].id_account])
                    await sendRequest("update AppUser set telegram=$1 where id_user=$2",[userBot[0].id_account,user[0].id_user])
                }
                ctx.reply(`üéâ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω, —Ç–µ–ø–µ—Ä—å —Å—é–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`)
                .catch(err=>null)
            }
        }
        else ctx.reply(`Faspark - —Å–µ—Ä–≤–∏—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞ üöó –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏`,{reply_markup:{inline_keyboard:[[Markup.button.callback("üõ† –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ","report")]]}}).catch(err=>console.log(err))
    })
    bot.action('report',(ctx)=>ctx.scene.enter('report'))
    bot.action(/^decline:[0-9]+$/,async(ctx)=>{
        let id=ctx.callbackQuery.data.split(":")[1]
        await sendRequest("delete from Arend where id_arend=$1",[id])
        ctx.deleteMessage().catch(err=>console.log(err))
    })
    bot.action(/^accept:[0-9]+$/,async(ctx)=>{
        let id=ctx.callbackQuery.data.split(":")[1]
        let user=await sendRequest("select AppUser.*,Arend.id_price,Arend.time_start_arend,Arend.time_end_arend from Arend join Price on Arend.id_price=Price.id_price join AppUser on Arend.id_user=AppUser.id_user where id_arend=$1",[id])
        let chat=await sendRequest("select * from AccountTelegram where id_account=$1",[user[0]?.telegram])
        let costPlace=await sendRequest("select * from Price where id_price=$1",[user[0].id_price])
        let costs=costPlace[0]?.value+"‚ÇΩ/"+costPlace[0]?.time_arend
        let account=chat?.length?chat[0]?.first_name+" "+chat[0]?.last_name+" "+chat[0]?.username:"(–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω)"
        await sendRequest("update Arend set payyed=$2 where id_arend=$1",[id,true])
        ctx.editMessageText(`üéâ –ê—Ä–µ–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n<b>–¢–µ–ª–µ—Ñ–æ–Ω: </b>${user[0]?.phone}\n<b>–¢–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç: </b>${account}\n<b>–¶–µ–Ω–∞: </b>${costs}\n<b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: </b>${new Date(user[0]?.time_start_arend).toLocaleString()}\n<b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: </b>${new Date(user[0]?.time_end_arend).toLocaleString()}`,{parse_mode:'HTML'}).catch(err=>console.log(err))
    })
    bot.launch()
    .catch(err=>console.log(`–ë–æ—Ç –Ω–µ —É–ø–∞–ª –ø–æ –ø—Ä–∏—á–∏–Ω–µ - ${err}`))
    return bot
}